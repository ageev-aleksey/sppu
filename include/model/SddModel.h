//
// Created by nrx on 30.07.2020.
//

#ifndef TESTSIMULINKMODEL_SDDMODEL_H
#define TESTSIMULINKMODEL_SDDMODEL_H
#include <thread>
#include <mutex>
#include <iostream>
#include <memory>
class sdd_modelModelClass;

/**
 * Модель сферического привода прямого управления. Класс является оберткой
 * над кодом, который был сгенерирован с помощью Simulink Embeded Coder из модели Matlab Simulink
 * Класс корректно работате только при условии существования одного экземпляра в коде. При наличие более одного
 * Экземпляра класса, поведенение не опеределено
 */
class SddModel
{
public:
    /**
     * Состояние моделируемого устройства
     */
    struct State {
        double positionOx; /// Радианы поворота устройства по оси OX
        double positionOz;/// Радианы поворота устройства по оси OZ
        double speedOx; /// Скорость в радианах в секунду по оси OX
        double speedOz; /// Скорость в радианах в секунду по оси OZ
        double IOx; /// Сила тока на горизонатльных парных соосных катушках
        double IOz; /// Сила тока на вертикальных парных соосных катушках
        double time; /// момент времени моделирования, в котором модель имела данно состояние
        double oxSignal; // Воходной сигнал в модель
        double ozSignal; // Входной сигнал в модель
    };
    /**
     * Вход в модель. Может изменятся во время моделирования. Описывает воходное напряжение на катушки
     * Может использоваться для внешного моделирования шим контроллера, меняя напряжение в модели
     */
    struct Input {
        double pwmOx; /// Напряжение  на горизонатльных парных соосных катушках
        double pwmOz;/// Напряжение  на вертикальных  парных соосных катушках
        bool operator==(const Input &other) const {
            return (this->pwmOx == other.pwmOx) && (this->pwmOz == other.pwmOz);
        }
    };
    /**
     * Параметры модели. Могут быть изменены перед инициальзацией модели. \see init()
     */
    struct Parameters {
        double positionOx0; /// Начальное положение по оси OХ в радианах
        double positionOz0; /// Начальное положение по оси OZ в радианах
        double speedOx0; /// Начальная скорость по оси OX в радианах в секунду
        double speedOz0; /// Начальная скорость по оси OZ в радианах в секунду
        double structCoeff; /// Коэффициент модели описывющй геометрию модели. Является обратным значением к моменту инерции
        double frictionCoeff;/// Коэффициент составлющий момента трения
        double frictionLinearCoeff;/// Момент трения состоит из двух частей, линейнозависящей от скорости и квадратично зависящей от скорости. Это коэффициент линейной части
        double frictionQuadraticCoeff; /// Момент трения состоит из двух частей, линейнозависящей от скорости и квадратично зависящей от скорости. Это коэффициент квадратичной части
    };

    SddModel();
    SddModel(const SddModel &) = delete;
    ~SddModel();
    /**
     * Инициализация модели. Необходимо вызвать перед запуском моделирования.
     */
    void init();
    /**
     * Была ли модель проинициализирована
     * @return
     */
    bool isInit();
    /*
     * Сброс сотояния модели. Для запуска моделирования необходимо инициализация \see init()
     */
    void reset();
    /**
     * Выполнение одного шага моделирования. Перед вызовом этой функции необходимо выполнить инициализацию модели \see init()
     * @return Состояние модели на текущем шаге моделирования
     */
    State step();
    /**
     * Установка входиных значений в модель. ПО умолчанию значение воходных параметров раны нулю
     * @param input - структура вхожных параметров
     */
    void setInput(const Input &input);
    /**
     * Получение параметров модели
     * @return Праметры модели
     */
    Parameters getParameters();
    /**
     * Установка новых параметров модели. Выполняется перед инициализацией \see init().
     * Параметры не могут менятся во время моделирования. Если необходимо изменить парметры уже инициализированной модели,
     * необходимо выполнить сброс модели \see reset(), установить праметры, а затем проинициализировать модель \see init().
     * @param parameters - параметры модели
     */
    void setParameters(const Parameters &parameters);
    /**
     * Установка парамтеров по умолчанию.
     */
    void setParametersDefault();
private:
    bool mIsInit;
    Input mCurentInput;
    sdd_modelModelClass *pImpl;

};

#endif //TESTSIMULINKMODEL_SDDMODEL_H
